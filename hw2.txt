CS 220 HW#2
Robert Krawczyk

Chapter 10
1a. 1010.001
 b. ~11.11001

2a. b4
 b. ff

Chapter 11
1. unsigned integer: 266
   sign-magnitude: -10
   2's complement: 1111001 = -123

2. smallest: -4
   largest: 3

3. -7 = 1001 in 2's complement, 7 = 0111 in 2's complement
    1001
   +0111
   -----
   10000 (ignore carry-over bit)
    0000

   0000 = 0 in decimal

4. 4-bit: 1011
   6-bit: 111011
   8-bit: 11111011
   They have the same last few bits, the number of which is equal to the number of significant bits in the complement

5. Q = 3, M = -5
	Step	A	Q	Q_-1	M	n
	0	0000	0011	0	1011	4
	1	0101	0011	0	1011	4	A=A-M
		0010	1001	1	1011	3	shifted
	2	1001	0100	1	1011	2	shifted
	3	0100	0100	1	1011	2	A=A+M
		1010	0010	0	1011	1	shifted
	4	0101	0001	0	1011	0	shifted
	Product: (1)0001 = -15

6. Negative divisors or dividends can be dealt with by simply storing the signs of both, converting both to unsigned numbers, doing the division like normal, then applying the product of the two signs to the quotient, and applying just the divisor's sign to the remainder. Example: -11 / -4
	-11 = 10101		-4 = 11010
	|10101| = 01011		|11010| = 00100
		01011 / 00100: Q = 00010, R = 00011
	Now, because dividend and divisor were both negative, Q -> Q' = 11110
	And because divisor was negative, R -> R' = 11101
		
7. assuming unsigned
   largest: 1111.1111
   smallest: 0000.0000

8. assuming signed
   largest: 01111111
   smallest: 11111111

9. positive underflow: 00000000
   negative overflow: 11111111 + 10001000

10. (1)	101.101*2^3 =		 	1*2^5	+ 0 	+ 1*2^3	+ 1*2^2	+ 0	+ 1*2^0
	10.01*2^5 =		+1*2^6	+ 0 	+ 0 	+ 1*2^3
                                --------------------------------------------------------
				1000000	+100000	+0	+10000	+100	+0	+1	= 11100101

    (2)	101.101*2^3 =	 101101	*2^0
	10.01*2^5 =    *   1001	*2^3
		      ---------------
			 101101
			000000
		       000000
		      101101	*2^3
		      ---------------
		      110010101 * 2^3

Chapter 12
1.    A(A+C')(A+B) = A
   => A(A+(C'B))   = A
   => AA + A(C'B)  = A
   => A + A(C'B)   = A
   => A(1 + C'B)   = A
   => A(1)	   = A
   => A		   = A

2.    ABC + A'BC + AB'C + A'B'C + ABC' = C + AB
   => (A+A')BC + (A+A')B'C + ABC'      = C + AB
   => BC + B'C + ABC'		       = C + AB
   => (B+B')C + ABC'		       = C + AB
   => C (AB)C'			       = C + AB
   => (C+AB)(C+C')		       = C + AB
   => C + AB			       = C + AB

3. (A+B'+C)(A+B+C)(A'+B'+C')
		    BC
        00	01	11	10
        ___________________________
    A 0| 0	1	1	1
      1| 1	1	0	1

	(A+B'+C)(A+B+C)(A'+B'+C') = A'C + A'B + AB' + AC' + B'C + BC'